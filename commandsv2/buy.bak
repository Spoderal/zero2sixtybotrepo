const { SlashCommandBuilder } = require("@discordjs/builders");
const items = require("../data/items.json");
const User = require("../schema/profile-schema");
const Global = require("../schema/global-schema");

// Car Data
const carsData = require("../data/cardb.json");
const { emotes } = require("../common/emotes");
const { toCurrency, numberWithCommas } = require("../common/utils");
const colors = require("../common/colors");

const cars = Object.values(carsData.Cars);
// eslint-disable-next-line no-prototype-builtins
const carsWithClasses = cars.filter((c) => c.hasOwnProperty("Class"));
const classNames = new Set(carsWithClasses.map((c) => c.Class.toUpperCase()));

module.exports = {
  data: new SlashCommandBuilder()
    .setName("buy")
    .setDescription("Buy a car")
    .addStringOption((option) =>
      option
        .setName("class")
        .setDescription("The class of the car")
        .setRequired(true)
        .setAutocomplete(true)
    )
    .addStringOption((option) =>
      option
        .setName("name")
        .setDescription("The alias or name of the car")
        .setRequired(true)
        .setAutocomplete(true)
    )
    .addNumberOption((option) =>
      option
        .setName("quantity")
        .setDescription("The quantity you'd like to buy")
        .setRequired(false)
        .setAutocomplete(true)
    ),

  async autoComplete(interaction) {
    const { name, type, value, focused } = interaction.options.getFocused(true);

    console.log("autoComplete interaction: ", { name, type, value, focused });

    switch (name) {
      case "class": {
        const data = [...classNames.values()].map((cn) => ({
          name: cn,
          value: cn,
        }));
        console.log("sending class names back to client");
        interaction.respond(data);
        break;
      }

      case "name": {
        try {
          const selectedClass = interaction.options.get("class", true).value;
          const carsInClass = carsWithClasses
            .filter((c) => c.Class === selectedClass)
            .map((c) => ({ name: c.Name, value: c.Name }));
          console.log({ selectedClass, carsInClass });
          if (carsInClass?.length > 0) interaction.respond(carsInClass);
        } catch (e) {
          console.log(e);
        }
        return;
      }

      default:
        return;
    }

    // console.log(focusedValue);
    // return filteredCars;
  },

  async execute(interaction) {
    let userdata = await User.findOne({ id: interaction.user.id });
    let global = await Global.findOne({});

    let amount = interaction.options.getNumber("amount");
    let amount2 = amount || 1;
    let warehousedb = require("../data/warehouses.json");
    let houses = require("../data/houses.json");

    const { EmbedBuilder } = require("discord.js");
    let parts = require("../data/partsdb.json");
    let list2 = parts.Parts;
    let list3 = items;
    let boughtInput = interaction.options.getString("name").toLowerCase();
    let boughtCar = cars.find(
      (c) =>
        c.Name.toLowerCase() === boughtInput ||
        c.alias.toLowerCase() === boughtInput
    );
    let boughtName = boughtCar?.Name?.toLowerCase();
    console.log(boughtCar);
    console.log(boughtName, cars[boughtName]);

    let cash = userdata.cash;
    let gold = userdata.gold;
    let usercars = userdata.cars;
    let garagelimit = userdata.garageLimit;

    console.log(
      boughtCar,
      list2[boughtName],
      list3.Other[boughtName],
      list3.Police[boughtName],
      list3.Multiplier[boughtName],
      warehousedb[boughtName]
    );

    if (
      !boughtCar &&
      !list2[boughtName] &&
      !list3.Other[boughtName] &&
      !list3.Police[boughtName] &&
      !list3.Multiplier[boughtName] &&
      !warehousedb[boughtName]
    )
      return interaction.reply(
        "That car or part isn't available yet, suggest it in the support server! In the meantime, check how to use the command by running /buy."
      );
    if (!boughtName)
      return interaction.reply(
        "To use this command, specify the car or part you want to buy. Example: /buy 1995 Mazda Miata"
      );

    if (boughtCar) {
      if (usercars.length >= garagelimit)
        return interaction.reply(
          "Your spaces are already filled. Sell a car or get more garage space!"
        );

      if (boughtCar.Price == 0)
        return interaction.reply("This car is not purchasable.");
      if (usercars.includes(boughtCar.Name.toLowerCase()))
        return interaction.reply("You already own this car!");
      let carprice = boughtCar.Price;

      if (boughtCar.Blackmarket) {
        if (gold < carprice)
          return interaction.reply("You don't have enough gold!");

        userdata.gold -= carprice;
        let carobj;
        let idtoset = boughtCar.alias;
        let carindb = boughtCar;
        if (boughtCar.Range) {
          carobj = {
            ID: carindb.alias,
            Name: carindb.Name,
            Speed: carindb.Speed,
            Acceleration: carindb["0-60"],
            Handling: carindb.Handling,
            Parts: [],
            Emote: carindb.Emote,
            Livery: carindb.Image,
            Range: carindb.Range,
            MaxRange: carindb.Range,
            Miles: 0,
          };
        } else {
          carobj = {
            ID: carindb.alias,
            Name: carindb.Name,
            Speed: carindb.Speed,
            Acceleration: carindb["0-60"],
            Handling: carindb.Handling,
            Parts: [],
            Emote: carindb.Emote,
            Livery: carindb.Image,
            Miles: 0,
          };
        }
        await User.findOneAndUpdate(
          {
            id: interaction.user.id,
          },
          {
            $push: {
              cars: carobj,
            },
          }
        );

        let embed = new EmbedBuilder({
          title: `Bought ${boughtCar.Name}`,
          color: "#60b0f4",
          thumbnail: `${boughtCar.Image}`,

          fields: [
            { name: "Price", value: `${carprice} ${emotes.gold}` },
            { name: `ID`, value: `${idtoset}` },
            {
              name: "New gold balance",
              value: `${gold} ${emotes.gold}`,
            },
          ],
        });
        interaction.reply({ embeds: [embed] });
        return;
      } else {
        if (cash < carprice)
          return interaction.reply("You don't have enough cash!");

        if (boughtCar.Police) {
          if (cash < boughtCar.Price)
            return interaction.reply("You don't have enough cash!");

          let job = userdata.job;
          if (!job) return interaction.reply("You don't have a job!");
          if (job.Job !== "police")
            return interaction.reply(
              "You don't work as a cop! Use `/work hire` to get a job!"
            );

          let num = job.Number;

          if (num < boughtCar.Police)
            return interaction.reply(
              `You need the rank "${boughtCar.Rank}" to buy this car!`
            );
          let carobj;
          let idtoset = boughtCar.alias;
          let carindb = boughtCar;
          userdata.cash -= boughtCar.Price;
          if (boughtCar.Range) {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Range: carindb.Range,
              MaxRange: carindb.Range,
              Miles: 0,
            };
          } else {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Miles: 0,
            };
          }
          await User.findOneAndUpdate(
            {
              id: interaction.user.id,
            },
            {
              $push: {
                cars: carobj,
              },
            }
          );
          let embed = new EmbedBuilder()
            .setTitle(`Bought ${boughtCar.Name}`)
            .addFields([
              { name: "Price", value: `${toCurrency(boughtCar.Price)}` },
              { name: `ID`, value: `${idtoset}` },
              { name: "New cash balance", value: `${toCurrency(cash)}` },
            ])
            .setColor(colors.blue)
            .setThumbnail(`${boughtCar.Image}`);
          return interaction.reply({ embeds: [embed] });
        }
        let sellprice = boughtCar.Price * 0.65;
        console.log(sellprice);
        let discountcar = "0";
        if (discountcar !== "0") {
          let disccarprice =
            boughtCar.Price - boughtCar.Price * parseFloat(discountcar);
          let carobj;
          if (cash < disccarprice)
            return interaction.reply(`You can't afford this car!`);
          cash -= disccarprice;
          let idtoset = boughtCar.alias;
          let carindb = boughtCar;
          if (boughtCar.Range) {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Range: carindb.Range,
              MaxRange: carindb.Range,
              Miles: 0,
              Resale: sellprice,
            };
          } else {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Miles: 0,
              Resale: sellprice,
            };
          }
          await User.findOneAndUpdate(
            {
              id: interaction.user.id,
            },
            {
              $push: {
                cars: carobj,
              },
            }
          );
          let embed = new EmbedBuilder()
            .setTitle(`Bought ${boughtCar.Name}`)
            .addFields([
              {
                name: "Price",
                value: `${toCurrency(disccarprice)} with discount`,
              },
              { name: "New cash balance", value: `${toCurrency(cash)}` },
              { name: `ID`, value: `${idtoset}` },
            ])
            .setColor(colors.blue)
            .setThumbnail(`${boughtCar.Image}`);
          interaction.reply({ embeds: [embed] });
        } else {
          let sellprice = boughtCar.Price * 0.65;

          if (cash < carprice)
            return interaction.reply("You don't have enough cash!");
          let carobj;
          cash -= carprice;

          let idtoset = boughtCar.alias;
          let carindb = boughtCar;
          if (boughtCar.Range) {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Range: carindb.Range,
              MaxRange: carindb.Range,
              Miles: 0,
              Resale: sellprice,
            };
          } else {
            carobj = {
              ID: carindb.alias,
              Name: carindb.Name,
              Speed: carindb.Speed,
              Acceleration: carindb["0-60"],
              Handling: carindb.Handling,
              Parts: [],
              Emote: carindb.Emote,
              Livery: carindb.Image,
              Miles: 0,
              Resale: sellprice,
            };
          }
          await User.findOneAndUpdate(
            {
              id: interaction.user.id,
            },
            {
              $push: {
                cars: carobj,
              },
            }
          );

          userdata.save();

          let embed = new EmbedBuilder()
            .setTitle(`✅ Bought ${boughtCar.Name}`)
            .addFields([
              {
                name: "Price",
                value: `${emotes.cash} ${toCurrency(carprice)}`,
                inline: true,
              },

              { name: `ID`, value: `${idtoset}`, inline: true },
              {
                name: "New cash balance",
                value: `${emotes.cash} ${toCurrency(cash)}`,
              },
            ])
            .setColor(3447003)
            .setThumbnail(`${boughtCar.Image}`);
          interaction.reply({ embeds: [embed] });
        }
      }
    } else if (list2[boughtName.toLowerCase()]) {
      let discount = userdata.discountparts;
      if (amount2 > 50)
        return interaction.reply(
          `The max amount you can buy in one command is 50!`
        );
      if (parts.Parts[boughtName].Tier == "BM1") {
        if (gold < parts.Parts[boughtName].Price)
          return interaction.reply("You don't have enough gold!");
        userdata.gold -= parts.Parts[boughtName].Price;
        userdata.parts.push(boughtName.toLowerCase());
        userdata.save();

        interaction.reply(
          `You bought a ${
            parts.Parts[boughtName].Name
          } for 🪙 ${numberWithCommas(parts.Parts[boughtName].Price)}`
        );
      } else {
        if (discount) {
          let priceforpart =
            parts.Parts[boughtName].Price -
            parts.Parts[boughtName].Price * parseFloat(discount);
          if (parts.Parts[boughtName].Price == 0)
            return interaction.reply("This part is not purchasable.");
          if (cash < priceforpart * amount2)
            return interaction.reply("You don't have enough cash!");
          priceforpart = amount2 * priceforpart;
          userdata.cash -= priceforpart;
          let user1newpart = [];
          for (var i = 0; i < amount2; i++)
            user1newpart.push(boughtName.toLowerCase());
          for (i in user1newpart) {
            userdata.parts.push(boughtName.toLowerCase());
          }
          userdata.save();

          let embed = new EmbedBuilder()
            .setTitle(
              `✅ Bought x${amount2} ${parts.Parts[boughtName].Name} Discounted`
            )
            .addFields([
              {
                name: `Price`,
                value: `${emotes.cash} ${toCurrency(priceforpart)}`,
              },
              {
                name: "New cash balance",
                value: `${emotes.cash} ${toCurrency(cash)}`,
              },
            ])
            .setColor(`#60b0f4`);
          if (parts.Parts[boughtName].Image) {
            embed.setThumbnail(parts.Parts[boughtName].Image);
          }
          await interaction.reply({ embeds: [embed] });
        } else {
          if (parts.Parts[boughtName].Price == 0)
            return interaction.reply("This part is not purchasable.");
          let newprice = parts.Parts[boughtName].Price * amount2;
          if (userdata.cash < newprice)
            return interaction.reply(
              `You cant afford this! You need ${toCurrency(newprice)}`
            );
          userdata.cash -= newprice;
          let user1newpart = [];

          for (let i = 0; i < amount2; i++)
            user1newpart.push(boughtName.toLowerCase());
          for (i in user1newpart) {
            userdata.parts.push(boughtName.toLowerCase());
          }
          userdata.save();
          let embed = new EmbedBuilder()
            .setTitle(`✅ Bought x${amount2} ${parts.Parts[boughtName].Name}`)
            .addFields([
              {
                name: `Price`,
                value: `${emotes.cash} ${toCurrency(
                  parts.Parts[boughtName].Price
                )}`,
              },
              {
                name: "New cash balance",
                value: `${emotes.cash} ${toCurrency(cash)}`,
              },
            ])
            .setColor(`#60b0f4`);
          if (parts.Parts[boughtName].Image) {
            embed.setThumbnail(parts.Parts[boughtName].Image);
          }
          await interaction.reply({ embeds: [embed] });
        }
      }
    } else if (houses[boughtName.toLowerCase()]) {
      if (cash < houses[boughtName.toLowerCase()].Price)
        return interaction.reply("You don't have enough cash!");
      // let house = userdata.house;
      // let garagelimit = userdata.garageLimit;
      if (boughtName.toLowerCase() !== "yacht") {
        // if (house) {
        //   if (house.perks.includes("+2 Garage spaces")) {
        //     garagelimit -= 2;
        //   } else if (house.perks.includes("+3 Garage spaces")) {
        //     garagelimit -= 3;
        //   } else if (house.perks.includes("+4 Garage spaces")) {
        //     garagelimit -= 4;
        //   } else if (house.perks.includes("+6 Garage spaces")) {
        //     garagelimit -= 6;
        //   } else if (house.perks.includes("+15 Garage spaces")) {
        //     garagelimit -= 15;
        //   }
        // }
        if (houses[boughtName].Rewards.includes("10% Discount on parts")) {
          userdata.discountparts = 0.1;
        } else if (
          houses[boughtName].Rewards.includes("15% Discount on parts")
        ) {
          userdata.discountparts = 0.15;
        } else if (
          houses[boughtName].Rewards.includes("20% Discount on parts")
        ) {
          userdata.discountparts = 0.2;
        }
        if (
          houses[boughtName].Rewards.includes("20% Discount on parts AND cars")
        ) {
          userdata.discountparts = 0.2;
          userdata.discountcars = 0.2;
        } else if (
          houses[boughtName].Rewards.includes("25% Discount on parts AND cars")
        ) {
          userdata.discountparts = 0.2;
          userdata.discountcars = 0.2;
        }

        if (houses[boughtName].Rewards.includes("+2 Garage spaces")) {
          userdata.garageLimit += 2;
        } else if (houses[boughtName].Rewards.includes("+3 Garage spaces")) {
          userdata.garageLimit += 3;
        } else if (houses[boughtName].Rewards.includes("+4 Garage spaces")) {
          userdata.garageLimit += 4;
        } else if (houses[boughtName].Rewards.includes("+6 Garage spaces")) {
          userdata.garageLimit += 6;
        } else if (houses[boughtName].Rewards.includes("+15 Garage spaces")) {
          userdata.garageLimit += 15;
        }
        let houseobj = {
          name: houses[boughtName.toLowerCase()].Name,
          perks: houses[boughtName.toLowerCase()].Rewards,
        };
        userdata.house = houseobj;
      } else {
        userdata.yacht = true;
      }
      userdata.cash -= houses[boughtName.toLowerCase()].Price;
      userdata.save();
      interaction.reply(
        `You bought ${houses[boughtName].Name} for ${toCurrency(
          houses[boughtName].Price
        )}`
      );
    } else if (warehousedb[boughtName.toLowerCase()]) {
      let warehouses = userdata.warehouses;
      let prestige = userdata.prestige;
      let wareprice = warehousedb[boughtName.toLowerCase()].Price;
      if (cash < wareprice)
        return interaction.reply(`You cant afford this warehouse!`);
      if (prestige < 11)
        return interaction.reply(
          `Your prestige needs to be 11 before you can buy warehouses!`
        );
      if (warehouses.includes(boughtName.toLowerCase()))
        return interaction.reply(`You've already purchased this warehouse!`);

      await User.findOneAndUpdate(
        {
          id: interaction.user.id,
        },
        {
          $push: {
            warehouses: boughtName.toLowerCase(),
          },
        }
      );

      userdata.garageLimit += warehousedb[boughtName.toLowerCase()].Space;
      userdata.save();

      interaction.reply(
        `You bought the ${warehousedb[boughtName.toLowerCase()].Emote} ${
          warehousedb[boughtName.toLowerCase()].Name
        } for ${toCurrency(warehousedb[boughtName.toLowerCase()].Price)}`
      );
    } else if (
      list3.Police[boughtName.toLowerCase()] ||
      list3.Other[boughtName.toLowerCase()] ||
      list3.Multiplier[boughtName.toLowerCase()]
    ) {
      let itemshop = global.itemshop;
      let filtereditem = itemshop.filter(
        (item) => item.Name.toLowerCase() == boughtName.toLowerCase()
      );
      let itemindb = filtereditem[0] || "No ID";

      if (itemindb == "No ID")
        return interaction.reply(
          `That item isn't in the shop today, check back tomorrow!`
        );

      let pricing = itemindb.Price * amount2;
      if (userdata.cash < pricing)
        return interaction.reply(
          `You cant afford this! You need ${toCurrency(pricing)}`
        );

      let user1newarr = [];

      for (let i = 0; i < amount2; i++)
        user1newarr.push(boughtName.toLowerCase());
      for (i in user1newarr) {
        userdata.items.push(boughtName.toLowerCase());
      }
      userdata.cash -= pricing;

      userdata.save();

      interaction.reply(
        `Purchased x${amount2} ${list3.Other[boughtName].Emote} ${
          list3.Other[boughtName].Name
        } for ${toCurrency(pricing)}`
      );
    } else {
      interaction.reply(`Thats not a purchasable item, car, house, or part!`);
    }
  },
};
